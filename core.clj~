(ns my-sketch.core
  (:require [quil.core :as q]
            [quil.middleware :as m]
            [clojure.data.csv :as csv]
            [clojure.java.io :as io]))
                                        ; Draws sphere at point [0 0 0] and 6 cubes around it.
                                        ; You can fly around this objects using navigation-3d.
                                        ; This draw function is fun-mode compatible (it takes state),
                                        ; though it's not used here, but we need fun-mode for navigation-3d.





(defn get-lat-long []
  (def uri "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
  (with-open [rdr (io/reader uri)]
    (doall 
     (->> (csv/read-csv rdr)
          (map #(subvec % 1 3))
          (map #(map read-string %))
          rest))))
(def data-csv (get-lat-long))
(defn draw [state]
  (q/background 255)
  (q/lights)
  (q/fill 250 100 150)
  ;;  (q/sphere 75)
  (q/fill 150 154 50)
  (doseq [[alpha beta] data-csv]
    (let [r 75
          a (q/radians alpha)
          b (q/radians beta)
          z (* r (q/sin a))
          vsot (* r (q/cos a))
          x (* vsot (q/cos b))
          y (* vsot (q/sin b))]
      (q/point x y z))))
(q/defsketch my-sketch
  :draw draw
  :size [500 500]
  :renderer :p3d
  :navigation-3d {:position [0 0 75]}
                                        ; Enable navigation-3d.
                                        ; Note: it should be used together with fun-mode.
  :middleware [m/fun-mode m/navigation-3d])

;; (defn draw [state]
;;   (q/background 255)
;;   (q/lights)
;;   (q/fill 250 100 150)
;;   (q/sphere 75)
;;   (doseq [pos [[150 0 0] [-150 0 0]
;;                [0 150 0] [0 -150 0]
;;                [0 0 150] [0 0 -150]]]
;;     (q/with-translation pos
;;       (q/box 75))))


;; (defn setup []
;;   ; Set frame rate to 30 frames per second.
;;   (q/frame-rate 30)
;;   ; Set color mode to HSB (HSV) instead of default RGB.
;;   (q/color-mode :hsb)
;;   ; setup function returns initial state. It contains
;;   ; circle color and position.
;;   {:color 0
;;    :angle 0})

;; (defn update-state [state]
;;   ; Update sketch state by changing circle color and position.
;;   {:color (mod (+ (:color state) 0.7) 255)
;;    :angle (+ (:angle state) 0.1)})

;; (defn draw-state [state]
;;   ; Clear the sketch by filling it with light-grey color.
;;   (q/background 240)
;;   ; Set circle color.
;;   (q/fill (:color state) 255 255)
;;   ; Calculate x and y coordinates of the circle.
;;   (let [angle (:angle state)
;;         x (* 150 (q/cos angle))
;;         y (* 150 (q/sin angle))]
;;     ; Move origin point to the center of the sketch.
;;     (q/with-translation [(/ (q/width) 2)
;;                          (/ (q/height) 2)]
;;       ; Draw the circle.
;;       (q/ellipse x y 100 100))))

;; (q/defsketch my-sketch
;;   :title "You spin my circle right round"
;;   :size [500 500]
;;   ; setup function called only once, during sketch initialization.
;;   :setup setup
;;   ; update-state is called on each iteration before draw-state.
;;   :update update-state
;;   :draw draw-state
;;   :features [:keep-on-top]
;;   ; This sketch uses functional-mode middleware.
;;   ; Check quil wiki for more info about middlewares and particularly
;;   ; fun-mode.
;;   :middleware [m/fun-mode])
